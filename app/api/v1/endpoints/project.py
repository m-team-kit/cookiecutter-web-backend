from typing import Any, List
from uuid import UUID

from fastapi import APIRouter, Depends
from sqlalchemy.orm import Session

from app import crud, models, schemas
from app.api import deps

router = APIRouter()


@router.get(
    path="/{uuid}",
    response_model=List[schemas.Option],
    summary="(Public) Returns options for a project template.",
    operation_id="optionsProject",
)
def options_project(
    *,
    db: Session = Depends(deps.get_db),
    uuid: UUID,
) -> Any:
    """
    Use this method to retrieve a list of detailed options to generate
    your project from a template.
    """
    template = crud.template.get(db=db, id=uuid)
    return template.options


@router.post(
    path="/{uuid}",
    response_model=schemas.Project,
    summary="(User) Creates software project from the template",
    operation_id="createProject",
)
def create_project(
    *,
    db: Session = Depends(deps.get_db),
    uuid: UUID,
    options_in: List[schemas.Option],
    current_user: models.User = Depends(deps.get_current_active_user),
) -> Any:
    """
    Use this method to generate software project using the specific template.
    Pass your options as a list of key-value pairs in the request body and
    download the project as a .zip file using GET '/download/{code}' endpoint.
    """
    template = crud.template.get(db=db, id=uuid)
    return template.project(owner_id=current_user.id, options=options_in)


@router.get(
    path="/download/{code}",
    response_model=schemas.Template,
    summary="(User) Downloads the software project generated from user.",
    operation_id="downloadProject",
)
def download_project(
    *,
    db: Session = Depends(deps.get_db),
    code: UUID,
    current_user: models.User = Depends(deps.get_current_active_user),
) -> Any:
    """
    Downloads a pre-generated project .zip file. A valid code is generated by
    the POST /{uuid} operation. The code can be used just once, after which a
    new project and code will need to be generated.
    """
    raise NotImplementedError
